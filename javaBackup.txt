package com.sqilline.cordova.dicom;

import org.apache.cordova.CordovaWebView;
import org.apache.cordova.CallbackContext;
import org.apache.cordova.CordovaPlugin;
import org.apache.cordova.CordovaInterface;
import org.apache.cordova.PluginResult;

import android.util.Log;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.lang.Override;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.sinch.android.rtc.ClientRegistration;
import com.sinch.android.rtc.Sinch;
import com.sinch.android.rtc.SinchClient;
import com.sinch.android.rtc.SinchClientListener;
import com.sinch.android.rtc.SinchError;
import com.sinch.android.rtc.calling.Call;
import com.sinch.android.rtc.calling.CallListener;
import com.sinch.android.rtc.PushPair;
import com.sinch.android.rtc.calling.CallState;


public class CoolPlugin extends CordovaPlugin {

    public static final String TAG = "VoIP PLUGIN";

    private Call call = null;
    private SinchClient sinchClient =null;
    private static CallbackContext baseCallbackContext;
    private CallbackContext createCallbackContext;
    private CallbackContext joinCallbackContext;
    private String username;
    private String conferenceID;
    private String toRoomID;



    public static CallbackContext getBaseCallbackContext(){

        return baseCallbackContext;

    }

    public CoolPlugin() {
    }


    public void initialize(CordovaInterface cordova, CordovaWebView webView) {
        super.initialize(cordova, webView);
        Log.v(TAG, "Init VoIP plugin");

    }



    public boolean execute(final String action,final JSONArray args, final CallbackContext callbackContext) throws JSONException {

        Log.v(TAG, "VoIP plugin received:" + action);

        if ("REGISTER".equals(action)) {

            this.baseCallbackContext = callbackContext;

            if (sinchClient == null) {

                username = "sqilline-user";

                sinchClient = Sinch.getSinchClientBuilder()
                        .context(cordova.getActivity().getApplicationContext())
                        .userId(username)
                        .applicationKey("2bd1c61e-b210-46db-86d7-b6441c84281b")
                        .applicationSecret("UZzt3EnAgk2A8zlbTvDGfA==")
                        .environmentHost("sandbox.sinch.com")
                        .build();

                sinchClient.setSupportCalling(true);

                sinchClient.addSinchClientListener(new SinchClientListener() {

                    @Override
                    public void onClientStarted(SinchClient client) {

                        PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "VoIP CLIENT_START");
                        pluginResult.setKeepCallback(true);
                        baseCallbackContext.sendPluginResult(pluginResult);

                    }

                    @Override
                    public void onClientStopped(SinchClient client) {

                        baseCallbackContext.success("VoIP CLIENT_STOP");



                    }

                    @Override
                    public void onClientFailed(SinchClient client, SinchError error) {

                        baseCallbackContext.error("VoIP CLIENT_FAIL");



                    }

                    @Override
                    public void onRegistrationCredentialsRequired(SinchClient client, ClientRegistration registrationCallback) {

                        baseCallbackContext.error("VoIP REG_REQ");


                    }

                    @Override
                    public void onLogMessage(int level, String area, String message) {
                        switch (level) {
                            case Log.DEBUG:
                                Log.d(area, message);
                                break;
                            case Log.ERROR:
                                Log.e(area, message);
                                break;
                            case Log.INFO:
                                Log.i(area, message);
                                break;
                            case Log.VERBOSE:
                                Log.v(area, message);
                                break;
                            case Log.WARN:
                                Log.w(area, message);
                                break;
                        }
                    }

                });

                //Starting client!!
                sinchClient.start();

                PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "VoIP REG_OK");
                pluginResult.setKeepCallback(true);
                baseCallbackContext.sendPluginResult(pluginResult);


            } else {

                PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "You are already on");
                pluginResult.setKeepCallback(true);
                baseCallbackContext.sendPluginResult(pluginResult);

            }

            return true;

        } else if ("CREATE_ROOM".equals(action)) {

            //Creating new conference room
            this.createCallbackContext = callbackContext;

            if (sinchClient != null) {

                Map<String, String> callHeader = new HashMap<String, String>();

                conferenceID = UUID.randomUUID().toString();

                callHeader.put("SessionID",conferenceID );

                //TODO
                call = sinchClient.getCallClient().callConference("TrainingRoom",callHeader);

                call.addCallListener(new CallListener() {

                    @Override
                    public void onCallProgressing(Call call) {

                        //Play some sound

                        PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CREATING_ON_PROGRESS");
                        pluginResult.setKeepCallback(true);
                        createCallbackContext.sendPluginResult(pluginResult);

                    }

                    @Override
                    public void onCallEstablished(Call call) {

                        //Inviting other users
                        cordova.getThreadPool().execute(new Runnable() {

                            public void run() {

                                try {

                                    //pushing only this user
                                    //we must know the usernames of other users
                                    JSONArray users = new JSONArray().put("sqilline-user1");

                                    JSONObject data = new JSONObject().put("collaborationUID", "todo_later")
                                                                      .put("conferenceId", conferenceID)
                                                                      .put("initiator", username)
                                                                      .put("users", users);

                                    Log.e("PUSH_REQUEST:",data.toString());

                                    String response = new UrlConnection("http://172.17.1.10:18090/squilline-scu-services/jsonServices", data,
                                            "PushVoice","/call-all",false,"no-hcp-address").connect();

                                    Log.e("PUSH_RESPONSE: ", " invite ready ");


                                    PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "Invite Response:\n" + response);
                                    pluginResult.setKeepCallback(true);
                                    createCallbackContext.sendPluginResult(pluginResult);


                                }catch (JSONException e){

                                    PluginResult pluginResult = new PluginResult(PluginResult.Status.ERROR, "JSON EXCEPTION:\n" + e.toString());
                                    pluginResult.setKeepCallback(true);
                                    createCallbackContext.sendPluginResult(pluginResult);

                                }

                            }
                        });

                    }


                    @Override
                    public void onCallEnded(Call call) {

                        PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CALL ENDED");
                        createCallbackContext.sendPluginResult(pluginResult);

                    }

                    @Override
                    public void onShouldSendPushNotification(Call call, List<PushPair> list) {
                        //TODO
                    }
                });

                PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CALLING");
                pluginResult.setKeepCallback(true);
                createCallbackContext.sendPluginResult(pluginResult);


            } else {

                createCallbackContext.error("Please register first");

            }

            return true;

        } else if ("JOIN_ROOM".equals(action)) {       //if we accept when we got invite

            //TODO


            toRoomID = args.getString(0);

            joinCallbackContext = callbackContext;

            Map<String, String> callHeader = new HashMap<String, String>();

            callHeader.put("SessionID",toRoomID );

            call = sinchClient.getCallClient().callConference(toRoomID,callHeader);

            call.addCallListener(new CallListener() {

                @Override
                public void onCallProgressing(Call call) {

                    //Play some sound

                    PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CALL PROGRESSING");
                    pluginResult.setKeepCallback(true);
                    joinCallbackContext.sendPluginResult(pluginResult);

                }

                @Override
                public void onCallEstablished(Call call) {

                    cordova.getThreadPool().execute(new Runnable() {

                        public void run() {





                            Log.e("INFO_REQUEST:", toRoomID);

                            String response = new UrlConnection("http://172.17.1.10:18090/squilline-scu-services/jsonServices", toRoomID,
                                    "InfoVoice","/conference-user-info",false,"no-hcp-address").connect();

                            Log.e("INFO_RESPONSE: ", response);




                            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "ESTABLISHED Response:\n" + response);
                            pluginResult.setKeepCallback(true);
                            joinCallbackContext.sendPluginResult(pluginResult);





                        }
                    });


                }

                @Override
                public void onCallEnded(Call call) {

                    PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CALL ENDED");
                    joinCallbackContext.sendPluginResult(pluginResult);

                }

                @Override
                public void onShouldSendPushNotification(Call call, List<PushPair> list) {

                }
            });

            PluginResult pluginResult = new PluginResult(PluginResult.Status.OK, "CALLING");
            pluginResult.setKeepCallback(true);
            joinCallbackContext.sendPluginResult(pluginResult);


            return true;


        } else if ("HANG".equals(action)) {

            if (sinchClient != null && (!call.getState().equals(CallState.ENDED))) {

                if (!call.getState().equals(CallState.ENDED)) {

                    call.hangup();
                    callbackContext.success("HANG_SUCCESS");

                } else {

                    callbackContext.error("Please establish conversation first");


                }
            } else {

                callbackContext.error("Please register first and establish conversation");

            }


            return true;

        } else if ("DESTROY".equals(action)) {

            if (sinchClient != null) {
                sinchClient.terminate();
                sinchClient=null;
                callbackContext.success("Destroy success");

            }else callbackContext.error("Destroy fail");



            return true;
        }


        return false;
    }




    public void onStop() {


    }

}

